{"version":3,"sources":["components/Results.js","components/UrlEntry.js","App.js","reportWebVitals.js","index.js"],"names":["Results","props","useState","tabIndex","setTabIndex","scraperResults","className","selectedIndex","onSelect","index","map","result","url","readOnly","value","content","UrlEntry","currentInput","setCurrentInput","addResult","onSubmit","event","URL","fixedInput","startsWith","search","URLSearchParams","toString","fetch","then","response","ok","json","data","alert","message","console","log","preventDefault","placeholder","onChange","target","App","setScraperResults","prevResults","newResults","filter","prevResult","push","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8RAKe,SAASA,EAAQC,GAAQ,IAAD,EACHC,mBAAS,GADN,mBAC5BC,EAD4B,KAClBC,EADkB,KAE9BC,EAAkBJ,EAAlBI,eACL,OAAO,qBAAKC,UAAU,kBAAf,SACH,eAAC,IAAD,CAAMC,cAAeJ,EAAUK,SAAU,SAAAC,GAAK,OAAIL,EAAYK,IAA9D,UACI,cAAC,IAAD,UACKJ,EAAeK,KAAI,SAACC,GAAD,OAAY,cAAC,IAAD,UAAuBA,EAAOC,KAApBD,EAAOC,UAEpDP,EAAeK,KAAI,SAAAC,GAAM,OACtB,cAAC,IAAD,UAA2B,0BAAUE,UAAQ,EAACP,UAAU,iBAAiBQ,MAAOH,EAAOI,WAAxEJ,EAAOC,a,MCXvB,SAASI,EAASf,GAAQ,IAAD,EACIC,mBAAS,IADb,mBAC7Be,EAD6B,KACfC,EADe,KAG/BC,EAAalB,EAAbkB,UA+BL,OAAO,sBAAMC,SAzBb,SAAsBC,GAClB,IAAIT,EAAM,IAAIU,IAAI,iCAEdC,EAAaN,EACZM,EAAWC,WAAW,aAAgBD,EAAWC,WAAW,aAC7DD,EAAU,kBAAcN,IAG5BL,EAAIa,OAAS,IAAIC,gBAAgB,CAACd,IAAKW,IAAaI,WAGpDC,MAAMhB,GAAKiB,MAAK,SAACC,GACRA,EAASC,GAMVD,EAASE,OAAOH,MAAK,SAACI,GAAD,OAAUd,EAAUc,MALzCH,EAASE,OAAOH,MAAK,SAACI,GAClBC,MAAM,kDAAD,OAAmDX,EAAnD,aAAkEU,EAAKE,QAAvE,wCACLC,QAAQC,IAAIJ,SAMxBf,EAAgB,IAChBG,EAAMiB,kBAGH,SACH,uBAAOC,YAAY,+BAA+BjC,UAAU,YAAYQ,MAAOG,EAAcuB,SA9BjG,SAAsBnB,GAClBH,EAAgBG,EAAMoB,OAAO3B,YCsBtB4B,MAxBf,WAAgB,IAAD,EACiCxC,mBAAS,IAD1C,mBACJG,EADI,KACYsC,EADZ,KAgBX,OACI,sBAAKrC,UAAU,MAAf,UACI,cAAC,EAAD,CAASD,eAAgBA,IACzB,cAAC,EAAD,CAAUc,UAhBlB,SAAmBR,GACfgC,GAAkB,SAACC,GACf,IAAIC,EAAaD,EAAYE,QAAO,SAACC,GAAD,OAAgBpC,EAAOC,MAAQmC,EAAWnC,OAO9E,OANAiC,EAAaA,EAAWnC,KAAI,SAACqC,GACrB,OAAO,eAAIA,OAGRC,KAAKrC,GAChByB,QAAQC,IAAIQ,GACLA,YCPJI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.eac7084a.chunk.js","sourcesContent":["import React, {useState} from \"react\"\nimport {Tab, TabList, TabPanel, Tabs} from \"react-tabs\";\nimport 'react-tabs/style/react-tabs.css';\nimport './Results.css'\n\nexport default function Results(props) {\n    const [tabIndex, setTabIndex] = useState(0);\n    let {scraperResults} = props;\n    return <div className=\"scraper-results\">\n        <Tabs selectedIndex={tabIndex} onSelect={index => setTabIndex(index)}>\n            <TabList>\n                {scraperResults.map((result) => <Tab key={result.url}>{result.url}</Tab>)}\n            </TabList>\n            {scraperResults.map(result => (\n                <TabPanel key={result.url}><textarea readOnly className=\"result-content\" value={result.content} /></TabPanel>\n            ))}\n        </Tabs>\n    </div>\n}\n\n","import React, {useState} from \"react\"\nimport \"./UrlEntry.css\"\n\nexport default function UrlEntry(props) {\n    const [currentInput, setCurrentInput] = useState('')\n\n    let {addResult} = props;\n\n    function handleChange(event) {\n        setCurrentInput(event.target.value);\n    }\n\n    function handleSubmit(event) {\n        let url = new URL('http://localhost:5000/website')\n\n        let fixedInput = currentInput;\n        if (!fixedInput.startsWith('https://') && !fixedInput.startsWith('http://')) {\n            fixedInput = `https://${currentInput}`\n        }\n\n        url.search = new URLSearchParams({url: fixedInput}).toString()\n\n\n        fetch(url).then((response) => {\n            if (!response.ok) {\n                response.json().then((data) => {\n                    alert(`There was an issue requesting the content from ${fixedInput}: ${data.message}. See the console for more details.`)\n                    console.log(data)\n                })\n            } else {\n                response.json().then((data) => addResult(data))\n            }}\n        )\n        setCurrentInput('');\n        event.preventDefault();\n    }\n\n    return <form onSubmit={handleSubmit}>\n        <input placeholder=\"Enter a URL and press enter.\" className=\"url-input\" value={currentInput} onChange={handleChange}/>\n    </form>\n}","import './App.css';\nimport React, {useState} from \"react\";\nimport Results from \"./components/Results\";\nimport UrlEntry from \"./components/UrlEntry\";\n\n\n\nfunction App() {\n    const [scraperResults, setScraperResults] = useState([]);\n\n    function addResult(result) {\n        setScraperResults((prevResults) => {\n            let newResults = prevResults.filter((prevResult) => result.url !== prevResult.url)\n            newResults = newResults.map((prevResult) => {\n                    return {...prevResult}\n                }\n            )\n            newResults.push(result)\n            console.log(newResults)\n            return newResults\n        })\n    }\n\n    return (\n        <div className=\"App\">\n            <Results scraperResults={scraperResults}/>\n            <UrlEntry addResult={addResult}/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}